// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for customers and admins
model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  hashedPassword  String?
  image           String?
  role            UserRole  @default(CUSTOMER)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  accounts        Account[]
  orders          Order[]
  reviews         Review[]
  addresses       Address[]
  wishlist        WishlistItem[]
}

enum UserRole {
  CUSTOMER
  ADMIN
}

// NextAuth account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Product model
model Product {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  price       Float
  comparePrice Float?  // Original price for showing discounts
  sku         String?
  stock       Int      @default(0)
  images      String[] // Array of image URLs
  featured    Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?
  variants    ProductVariant[]
  orderItems  OrderItem[]
  reviews     Review[]
  wishlist    WishlistItem[]
}

// Product variant model (e.g., different sizes, colors)
model ProductVariant {
  id          String @id @default(cuid())
  name        String
  sku         String?
  price       Float?
  stock       Int    @default(0)
  
  // Relations
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
  attributes  Json?   // Store attributes like color, size, etc.
}

// Product category model
model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  image       String?
  
  // Relations
  products    Product[]
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  parentId    String?
  children    Category[] @relation("CategoryHierarchy")
}

// Order model
model Order {
  id              String    @id @default(cuid())
  orderNumber     String    @unique
  status          OrderStatus @default(PENDING)
  total           Float
  subtotal        Float
  tax             Float?
  shipping        Float?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  orderItems      OrderItem[]
  shippingAddress Address?   @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  shippingAddressId String?
  billingAddress  Address?   @relation("BillingAddress", fields: [billingAddressId], references: [id])
  billingAddressId String?
  payment         Payment?
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

// Order item model
model OrderItem {
  id          String  @id @default(cuid())
  quantity    Int
  price       Float
  
  // Relations
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String
  product     Product @relation(fields: [productId], references: [id])
  productId   String
}

// Payment model
model Payment {
  id              String        @id @default(cuid())
  amount          Float
  provider        String
  status          PaymentStatus @default(PENDING)
  paymentIntentId String?       // For Stripe
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  order           Order         @relation(fields: [orderId], references: [id])
  orderId         String        @unique
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// Address model
model Address {
  id            String  @id @default(cuid())
  line1         String
  line2         String?
  city          String
  state         String
  postalCode    String
  country       String
  isDefault     Boolean @default(false)
  
  // Relations
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")
}

// Review model
model Review {
  id          String   @id @default(cuid())
  rating      Int
  comment     String?  @db.Text
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
}

// Wishlist item model
model WishlistItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@unique([userId, productId])
}
